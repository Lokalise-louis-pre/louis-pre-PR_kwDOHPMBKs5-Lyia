{"version":3,"file":"components-Modal-Modal-stories-mdx.9d06a4f7.iframe.bundle.js","mappings":";;AAqCA;AACA;AACA;AA/BA;AAoIA;AAnIA;;AAuIA;AAxIA;AA0IA;AAxIA;;AA4IA;AA9IA;AAgJA;AA7IA;;AAiJA;;;ACvFA;AACA;AAMA;;;;;;ACRA","sources":["webpack://@lokalise/louis/./src/components/Modal/styles.ts","webpack://@lokalise/louis/./src/components/Input/styles.ts","webpack://@lokalise/louis/./src/components/Toast/styles.ts"],"sourcesContent":["import { css, modifier, styled, variants } from '@lokalise/styled';\n\nimport type { ModalProps } from './Modal';\nimport { spacing, typography, value } from '../../utils/theme';\n\nexport type ModalSize = 'default' | 'wide';\n\nconst defaultSpacing = 6;\nconst doublePadding = 24;\nconst smallWidth = 320;\nconst wideWidth = 840;\nconst defaultWidth = 640;\n\ntype DialogProps = {\n\t$size?: ModalSize;\n\t$overflow?: ModalProps['overflow'];\n};\n\nexport const Header = styled.header`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: flex-start;\n\tpadding: ${spacing(defaultSpacing)};\n`;\n\nexport const Title = styled.h2`\n\t${typography('heading.4')}\n\tcolor: ${value('color.text.default')};\n\twidth: 100%;\n\tmargin: 0;\n`;\n\nexport const Main = styled.div<{ $isOverflow: boolean }>`\n\t${modifier(\n\t\t'$isOverflow',\n\t\tcss`\n\t\t\tbox-shadow:\n\t\t\t\t0 1px 0 0 ${value('color.border.light')},\n\t\t\t\t0 -1px 0 0 ${value('color.border.light')};\n\t\t`,\n\t)}\n\n\tpadding: ${spacing(0, defaultSpacing, defaultSpacing, defaultSpacing)};\n`;\n\nexport const Footer = styled.footer`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tgap: ${spacing(2)};\n\tpadding: ${spacing(defaultSpacing, defaultSpacing, defaultSpacing, defaultSpacing)};\n`;\n\nexport const Content = styled.div<{ $scrollbarWidth: number }>`\n\t/*\n\t* Section should be scrollable only when Footer is present. In Expert (lokalise-main) Modal grows as high\n\t* as it needs and when it gets higher than viewport body becomes scrollable. In order to not break this behavior\n\t* and have backwards compatability we can detect if the Footer and Main is present and only then make Main\n\t* scrollable. Hawing modal scrollable without footer probably would be wierd.\n\t*/\n\n\t// \":has\" is not supported in Firefox - fall back to default Modal scroll.\n\t&:has(${Footer}) {\n\t\t// Handle an edge case on small screens - if screen height is too small fall back to default Modal scroll.\n\t\t@media (min-height: 400px) {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\n\t\t\tmax-height: calc(100vh - ${spacing(3)} * 2);\n\n\t\t\t@media (min-width: 768px) {\n\t\t\t\tmax-height: calc(100vh - ${spacing(7)} * 2);\n\t\t\t}\n\t\t}\n\t}\n\n\t&:has(${Footer}) ${Main} {\n\t\t@media (min-height: 400px) {\n\t\t\toverflow-y: auto;\n\t\t\tscrollbar-gutter: stable; // Adds padding in a width of a scrollbar even when the scrollbar is not present which fixes the issue with shifting content.\n\t\t\tpadding: ${spacing(defaultSpacing)};\n\n\t\t\t/*\n\t\t\t* \"scrollbar-gutter\" are not supported on Safari. There the layout will shift to the right if scrollbar will\n\t\t\t* be present. It is possible to determine overflow by JS, but in case there is a shift to or from this\n\t\t\t* \"overflow\" state, content jumps for a split second. It happens because time passes between the appearance\n\t\t\t* of scrollbar and the time it takes to add/remove CSS and recalculate layout.\n\t\t\t*/\n\t\t\t@supports (scrollbar-gutter: stable) {\n\t\t\t\t// Subtract padding added by \"scrollbar-gutter\".\n\t\t\t\tpadding-right: calc(${spacing(defaultSpacing)} - ${(props) => props.$scrollbarWidth}px);\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const Actions = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tgap: ${spacing(2)};\n\tpadding-top: ${spacing(6)};\n\n\t@media (min-width: 768px) {\n\t\tpadding-top: ${spacing(7)};\n\t}\n`;\n\nexport const DialogOverlay = styled.div`\n\tbackground: rgba(0, 0, 0, 0.5);\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\toverflow: auto;\n\tz-index: ${value('zIndex.modal')};\n`;\n\nexport const StyledDialog = styled.dialog<DialogProps>`\n\tbackground-color: ${value('color.background.surface.default')};\n\tborder-radius: ${value('radius.modal')};\n\tborder: none;\n\tbox-sizing: border-box;\n\t${typography('body.small.default')}\n\tcolor: ${value('color.text.default')};\n\tmargin: revert; // ensure that browser can determine the correct margins to position the dialog\n\tmargin-top: ${spacing(3)};\n\tpadding: 0;\n\toverflow: ${({ $overflow }) => $overflow};\n\n\t@media (min-width: 768px) {\n\t\tmargin-top: ${spacing(7)};\n\t}\n\n\twidth: 100%;\n\n\t${variants(\n\t\t'$size',\n\t\t{\n\t\t\tsmall: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${smallWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${smallWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t\twide: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${wideWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${wideWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t\tdefault: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${defaultWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${defaultWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t},\n\t\t'default',\n\t)}\n`;\n","import { css, excludeProps, modifier, styled } from '@lokalise/styled';\nimport type { InputHTMLAttributes } from 'react';\n\nimport { withInputContainerStyle, withInputFieldStyle, withInputSizeVariants } from '../../utils/styles';\nimport type { InputSizeVariants, InputStyleProps } from '../../utils/styles';\nimport { spacing, value } from '../../utils/theme';\nimport type { FlexProps } from '../Flex';\nimport { Flex } from '../Flex';\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: minmax(50px, 1fr); /* This ensures Input doesn't overflow 100% */\n`;\n\nexport const StyledInput = styled.input.withConfig({ shouldForwardProp: excludeProps(['error']) })<\n\tInputHTMLAttributes<HTMLInputElement> & InputStyleProps\n>`\n\t${withInputFieldStyle};\n\n\tborder: 0;\n\tmin-width: 50px;\n\twidth: 100%;\n\tpadding: 0;\n\tdisplay: block;\n`;\n\nexport const InputIcon = styled.div`\n\tline-height: 1;\n\tfont-size: 0;\n`;\n\ntype InputContainerProps = {\n\tinputSize: InputSizeVariants;\n\thasPrefix?: boolean;\n\thasSuffix?: boolean;\n\tdisabled?: boolean;\n\terror?: boolean;\n};\n\nexport const InputContainer = styled(Flex).withConfig({\n\tshouldForwardProp: excludeProps(['inputSize', 'hasPrefix', 'hasSuffix', 'disabled', 'error']),\n})<FlexProps & InputContainerProps>`\n\t${withInputContainerStyle};\n\t${withInputSizeVariants};\n\n\talign-items: center;\n\tpadding: ${spacing(0, 3)};\n\tcolor: ${value('color.text.input.placeholder')};\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tcolor: ${value('color.border.active')};\n\t}\n\n\t// All items should preserve their width\n\t> * {\n\t\tflex-shrink: 0;\n\t}\n\n\t// Except input\n\t> ${StyledInput} {\n\t\tflex-shrink: 1;\n\t}\n\n\t${modifier(\n\t\t'hasPrefix',\n\t\tcss`\n\t\t\tpadding-left: ${spacing(2)};\n\t\t`,\n\t)};\n\n\t${modifier(\n\t\t'hasSuffix',\n\t\tcss`\n\t\t\tpadding-right: ${spacing(2)};\n\t\t`,\n\t)};\n`;\n","import { css, excludeProps, modifier, styled } from '@lokalise/styled';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/ReactToastify.css';\n\nimport { spacing, typography, value } from '../../utils/theme';\nimport { IconButton } from '../IconButton';\nimport type { IconButtonProps } from '../IconButton';\nimport type { PressableProps } from '../Pressable';\nimport { Pressable } from '../Pressable';\n\nexport const CloseIconButton = styled(IconButton)<IconButtonProps>`\n\topacity: 0;\n\ttransition: opacity 0.2s;\n`;\n\nexport const TypeIcon = styled.div.withConfig({\n\tshouldForwardProp: excludeProps(['type']),\n})`\n\tflex-basis: 16px;\n\tflex-shrink: 0;\n\tflex-grow: 0;\n\theight: 20px;\n\tdisplay: flex;\n\talign-items: center;\n`;\n\nexport const Content = styled.div`\n\twidth: 100%;\n\tflex-shrink: 1;\n\tflex-grow: 1;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgap: ${spacing(1)};\n`;\n\nexport const Title = styled.span`\n\t${typography('body.caption.strong')};\n\tdisplay: -webkit-box;\n\ttext-overflow: ellipsis;\n\t-webkit-line-clamp: 2;\n\t-webkit-box-orient: vertical;\n\tword-break: normal;\n\toverflow: hidden;\n`;\n\nexport const Description = styled.span`\n\t${typography('body.caption.default')};\n\tdisplay: -webkit-box;\n\ttext-overflow: ellipsis;\n\t-webkit-line-clamp: 8;\n\t-webkit-box-orient: vertical;\n\tword-break: normal;\n\toverflow: hidden;\n`;\n\nexport const ToastAnchor = styled(Pressable)<PressableProps>`\n\t${typography('body.link.caption')};\n\ttext-decoration: underline;\n\tcursor: pointer;\n\tcolor: ${value('color.text.default')};\n\n\t${modifier(\n\t\t({ href }: PressableProps) => !href,\n\t\tcss`\n\t\t\tbackground-color: transparent;\n\t\t\tborder: none;\n\t\t\tfont-family: inherit;\n\t\t\tpadding: 0;\n\t\t`,\n\t)}\n\n\t&:hover {\n\t\topacity: 0.7;\n\t}\n\ttransition: opacity ${value('motion.speed.1')};\n`;\n\nexport const StyledToastContainer = styled(ToastContainer)`\n\ttransform: translate3d(0, 0, 9999px);\n\tposition: fixed;\n\tfont-family: inherit;\n\twidth: 332px;\n\tmin-height: 44px;\n\tbox-sizing: border-box;\n\tpadding: 0;\n\n\t--toastify-color-light: ${value('color.text.default')};\n\t--toastify-color-dark: var(--toastify-color-light);\n\t--toastify-color-info: ${value('color.background.info')};\n\t--toastify-color-success: ${value('color.background.success')};\n\t--toastify-color-warning: ${value('color.background.warning')};\n\t--toastify-color-error: ${value('color.background.danger')};\n\t//--toastify-color-transparent: rgba(255, 255, 255, 0.7);\n\n\t--toastify-icon-color-info: ${value('color.text.info')};\n\t--toastify-icon-color-success: ${value('color.text.success')};\n\t--toastify-icon-color-warning: ${value('color.text.warning')};\n\t--toastify-icon-color-error: ${value('color.text.danger')};\n\n\t//--toastify-toast-width: 320px;\n\t//--toastify-toast-background: #fff;\n\t//--toastify-toast-min-height: 64px;\n\t//--toastify-toast-max-height: 800px;\n\t--toastify-font-family: ${value('font.family.default')};\n\t--toastify-z-index: ${value('zIndex.toast')};\n\n\t--toastify-text-color-light: ${value('color.text.default')};\n\t--toastify-text-color-dark: var(--toastify-text-color-light);\n\n\t--toastify-text-color-info: var(--toastify-text-color-light);\n\t--toastify-text-color-success: var(--toastify-text-color-light);\n\t--toastify-text-color-warning: var(--toastify-text-color-light);\n\t--toastify-text-color-error: var(--toastify-text-color-light);\n\n\t//--toastify-spinner-color: #616161;\n\t//--toastify-spinner-color-empty-area: #e0e0e0;\n\n\t// Used when no type is provided\n\t// toast(\"**hello**\")\n\t//--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);\n\t// Used when no type is provided\n\t--toastify-color-progress-dark: var(--toastify-color-progress-light);\n\t--toastify-color-progress-info: var(--toastify-icon-color-info);\n\t--toastify-color-progress-success: var(--toastify-icon-color-success);\n\t--toastify-color-progress-warning: var(--toastify-icon-color-warning);\n\t--toastify-color-progress-error: var(--toastify-icon-color-error);\n\n\t.Toastify__toast {\n\t\tbox-sizing: border-box;\n\t\tpadding: ${spacing(3, 2)};\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tcolor: ${value('color.text.default')};\n\t\tbox-shadow: none;\n\t\tcursor: default;\n\t\tmin-height: 44px;\n\t\toverflow: visible;\n\t\tborder-radius: ${value('radius.notification')};\n\t\tmargin-bottom: ${spacing(2)};\n\n\t\t&:hover ${CloseIconButton} {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t.Toastify__toast-icon {\n\t\tmargin: 0;\n\t}\n\n\t.Toastify__toast.Toastify__toast--success {\n\t\tbackground-color: var(--toastify-color-success);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-success);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--error {\n\t\tbackground-color: var(--toastify-color-error);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-error);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--warning {\n\t\tbackground-color: var(--toastify-color-warning);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-warning);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--info {\n\t\tbackground-color: var(--toastify-color-info);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-info);\n\t\t}\n\t}\n\n\t.Toastify__toast-body {\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tgap: ${spacing(2)};\n\t\tpadding: 0;\n\t}\n`;\n"],"names":[],"sourceRoot":""}